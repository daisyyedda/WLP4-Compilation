INT int
WAIN wain
LPAREN (
INT int
STAR *
ID begin
COMMA ,
INT int
ID size
RPAREN )
LBRACE {
INT int
STAR *
ID arr
BECOMES =
NULL NULL
SEMI ;
INT int
ID ifelse
BECOMES =
MINUS -
NUM 2
SEMI ;
INT int
ID m
BECOMES =
NUM 0
SEMI ;
INT int
ID n
BECOMES =
NUM 0
SEMI ;
INT int
ID maxFreq
BECOMES =
NUM 0
SEMI ;
INT int
ID maxVal
BECOMES =
NUM 0
SEMI ;
INT int
ID absMaxVal
BECOMES =
NUM 0
SEMI ;
INT int
ID currMax
BECOMES =
NUM 0
SEMI ;
INT int
ID absCurrMax
BECOMES =
NUM 0
SEMI ;
INT int
ID val
BECOMES =
NUM 0
SEMI ;
ID arr
BECOMES =
NEW new
INT int
LBRACK [
NUM 483
RBRACK ]
SEMI ;
WHILE while
LPAREN (
ID n
LT <
NUM 483
RPAREN )
LBRACE {
STAR *
LPAREN (
ID arr
PLUS +
ID n
RPAREN )
BECOMES =
NUM 0
SEMI ;
ID n
BECOMES =
ID n
PLUS +
NUM 1
SEMI ;
RBRACE }
WHILE while
LPAREN (
ID i
LT <
ID size
RPAREN )
LBRACE {
ID val
BECOMES =
STAR *
LPAREN (
ID begin
PLUS +
ID i
RPAREN )
SEMI ;
STAR *
LPAREN (
ID arr
PLUS +
ID val
PLUS +
NUM 241
RPAREN )
BECOMES =
STAR *
LPAREN (
ID arr
PLUS +
ID val
PLUS +
NUM 241
RPAREN )
PLUS +
NUM 1
SEMI ;
ID i
BECOMES =
ID i
PLUS +
NUM 1
SEMI ;
RBRACE }
WHILE while
LPAREN (
ID m
LT <
NUM 483
RPAREN )
LBRACE {
IF if
LPAREN (
STAR *
LPAREN (
ID arr
PLUS +
ID m
RPAREN )
GT >
ID maxFreq
RPAREN )
LBRACE {
ID maxFreq
BECOMES =
STAR *
LPAREN (
ID arr
PLUS +
ID m
RPAREN )
SEMI ;
ID maxVal
BECOMES =
ID m
MINUS -
NUM 241
SEMI ;
IF if
LPAREN (
ID m
LT <
NUM 241
RPAREN )
LBRACE {
ID absMaxVal
BECOMES =
NUM 241
MINUS -
ID m
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID absMaxVal
BECOMES =
ID m
MINUS -
NUM 241
SEMI ;
RBRACE }
RBRACE }
ELSE else
LBRACE {
RBRACE }
IF if
LPAREN (
STAR *
LPAREN (
ID arr
PLUS +
ID m
RPAREN )
EQ ==
ID maxFreq
RPAREN )
LBRACE {
IF if
LPAREN (
ID m
LT <
NUM 241
RPAREN )
LBRACE {
ID absCurrMax
BECOMES =
NUM 241
MINUS -
ID m
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID absCurrMax
BECOMES =
ID m
MINUS -
NUM 241
SEMI ;
RBRACE }
IF if
LPAREN (
ID absMaxVal
GT >
ID absCurrMax
RPAREN )
LBRACE {
ID maxVal
BECOMES =
ID m
MINUS -
NUM 241
SEMI ;
ID absMaxVal
BECOMES =
ID absCurrMax
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
RBRACE }
ELSE else
LBRACE {
RBRACE }
ID m
BECOMES =
ID m
PLUS +
NUM 1
SEMI ;
RBRACE }
DELETE delete
LBRACK [
RBRACK ]
ID arr
SEMI ;
RETURN return
ID maxVal
SEMI ;
RBRACE }
